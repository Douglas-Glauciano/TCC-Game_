# states/system/credits_state.py
import curses
from ..base_state import BaseState
import pyfiglet

# states/system/team_details_state.py
import curses
from ..base_state import BaseState
import pyfiglet

class TeamDetailsState(BaseState):
    def __init__(self, game):
        super().__init__(game)
        self.members = self._create_team_members()
        self.current_member = 0
        self.scrollable = True
        self.menu_options = ["Membro Anterior", "Voltar", "Pr√≥ximo Membro"]

    def _create_team_members(self):
        return [
            {
                "name": "Hannah",
                "easier_read": "",
                "role": "Desenvolvedora Principal",
                "fun_fact": "Programou 99,999999% do jogo sozinha üíª"
            },
            {
                "name": "Colegas de curso",
                "easier_read": "",
                "role": "Testadores & Ideias",
                "fun_fact": "S√£o respons√°veis por bugs... digo, *features*! üêõ"
            },
            {
                "name": "Professores (Renan, Lyniker, Piero)",
                "easier_read": "(Renan, Lyniker, Piero)",
                "role": "Orienta√ß√£o Acad√™mica",
                "fun_fact": "Sempre pediam documenta√ß√£o extra üìö"
            }
        ]

    def render(self, stdscr):
        stdscr.clear()
        height, width = stdscr.getmaxyx()

        member = self.members[self.current_member]

        # Renderiza t√≠tulo
        ascii_title = pyfiglet.figlet_format(member["name"], font="small", width=width)
        for i, line in enumerate(ascii_title.splitlines()):
            x = max((width - len(line)) // 2, 0)
            try:
                stdscr.addstr(i, x, line, curses.A_BOLD)
            except curses.error:
                pass

        y = len(ascii_title.splitlines()) + 2
        info = [
            f"{member['easier_read']}",
            "",
            f"Fun√ß√£o: {member['role']}",
            "",
            f"Curiosidade: {member['fun_fact']}"
        ]

        for line in info:
            x = max((width - len(line)) // 2, 0)
            try:
                stdscr.addstr(y, x, line)
            except curses.error:
                pass
            y += 1

        # Barra inferior
        nav_text = f"Membro {self.current_member + 1}/{len(self.members)}"
        stdscr.addstr(height - 2, (width - len(nav_text)) // 2, nav_text)

        # Op√ß√µes
        option_spacing = width // (len(self.menu_options) + 1)
        for i, option in enumerate(self.menu_options):
            x = option_spacing * (i + 1) - len(option) // 2
            if i == self.current_selection:
                stdscr.addstr(height - 1, x, option, curses.A_REVERSE)
            else:
                stdscr.addstr(height - 1, x, option)

        stdscr.refresh()

    def handle_input(self):
        key = self.stdscr.getch()

        if key in (curses.KEY_LEFT, ord('a')):
            self.current_selection = (self.current_selection - 1) % len(self.menu_options)
            self.game.needs_render = True
        elif key in (curses.KEY_RIGHT, ord('d')):
            self.current_selection = (self.current_selection + 1) % len(self.menu_options)
            self.game.needs_render = True
        elif key in (curses.KEY_ENTER, 10, 13):
            selected = self.menu_options[self.current_selection]

            if selected == "Pr√≥ximo Membro":
                self.current_member = (self.current_member + 1) % len(self.members)
            elif selected == "Membro Anterior":
                self.current_member = (self.current_member - 1) % len(self.members)
            elif selected == "Voltar":
                self.game.pop_state()

            self.current_selection = 0
            self.game.needs_render = True

        elif key == 27:  # ESC
            self.game.pop_state()
            self.game.needs_render = True


class CreditsState(BaseState):
    def __init__(self, game):
        super().__init__(game)
        self.pages = self._create_credits_pages()
        self.current_page = 0
        self.menu_options = self._get_navigation_options()
        self.scrollable = True  # Ativa o sistema de rolagem

    def _get_navigation_options(self):
        """Retorna as op√ß√µes de navega√ß√£o baseadas na p√°gina atual"""
        if self.current_page == 0:
            return ["Pr√≥xima P√°gina", "Voltar ao Menu"]
        elif self.current_page == len(self.pages) - 1:
            return ["P√°gina Anterior", "Voltar ao Menu"]
        elif self.current_page == 4:  # P√°gina "Agradecimentos"
            return ["P√°gina Anterior", "Ver Equipe com Detalhes", "Voltar ao Menu", "Pr√≥xima P√°gina"]
        else:
            return ["P√°gina Anterior", "Voltar ao Menu", "Pr√≥xima P√°gina"]

    def _create_credits_pages(self):
        """Cria todas as p√°ginas de cr√©ditos/documenta√ß√£o"""
        return [
            {
                "title": "Cr√©ditos - Rust Dice",
                "content": [
                    "Rust Dice - Um RPG baseado em texto",
                    "Inspirado no D&D 5¬™ Edi√ß√£o",
                    "",
                    "Desenvolvido como projeto de TCC (Durante 6 meses)",
                    "Curso de Ci√™ncia da Computa√ß√£o",
                    "Ano: 2025",
                    "",
                    "Este jogo demonstra conceitos de:",
                    "- Programa√ß√£o orientada a objetos",
                    "- Design patterns",
                    "- Persist√™ncia de dados",
                    "- Interface baseada em terminal",
                    "",
                    "Desenvolvido por:",
                    "- Hannah"
                ]
            },
            {
                "title": "Tecnologias Utilizadas",
                "content": [
                    "Linguagem: Python 3.12.10",
                    "Interface: Biblioteca curses",
                    "Banco de dados: SQLite3",
                    "",
                    "Bibliotecas principais:",
                    "- curses: Interface terminal",
                    "- pyfiglet: ASCII art",
                    "- pandas: Manipula√ß√£o de dados",
                    "- prettytable: Formata√ß√£o de tabelas",
                    "- SQLite3: Armazenamento e manipula√ß√£o de dados",
                    "",
                    "Arquitetura:",
                    "- Padr√£o State para gerenciamento de telas",
                    "- Sistema modular e expans√≠vel",
                    "",
                    "Ferramentas:",
                    "- Visual Studio Code: Editor de c√≥digo",
                    "- Git, GitHub e Drive: Controle de vers√£o",
                    "- DB Browser for SQLite: Gerenciamento do BD",
                    "- Venv: Ambiente virtual Python",
                    "",
                    "Sistema Operacional: Windows 10/11"
                ]
            },
            {
                "title": "Recursos e Inspira√ß√µes",
                "content": [
                    "Inspirado no D&D 5¬™ Edi√ß√£o da Wizards of the Coast",
                    "",
                    "Sistema de atributos baseado em D&D:",
                    "- For√ßa, Destreza, Constitui√ß√£o,",
                    "- Intelig√™ncia, Sabedoria, Carisma",
                    "",
                    "Sistema de combate inspirado em RPGs cl√°ssicos",
                    "",
                    "Elementos de progress√£o de personagem:",
                    "- Sistema de n√≠veis e experi√™ncia",
                    "- Per√≠cias baseadas em atributos",
                    "- Equipamentos e melhorias"
                ]
            },
            {
                "title": "Caracter√≠sticas do Projeto",
                "content": [
                    "Principais funcionalidades implementadas:",
                    "",
                    "‚úì Sistema completo de cria√ß√£o de personagem",
                    "‚úì Sistema de combate baseado em turnos",
                    "‚úì Sistema de invent√°rio e equipamentos",
                    "‚úì Mec√¢nicas de explora√ß√£o e descanso",
                    "‚úì Sistema de cidades com servi√ßos",
                    "‚úì Diferentes n√≠veis de dificuldade",
                    "‚úì Sistema de salvamento e carregamento",
                    "‚úì Interface localiz√°vel (pt-BR/en-US)"
                ]
            },
            {
                "title": "Agradecimentos",
                "content": [
                    "Agradecimentos Especiais:",
                    "",
                    "√Ä Universidade e Orientadores:",
                    "(Especialmente aos Docentes Renan, Lyniker e Piero)",
                    "- Pelo suporte t√©cnico e acad√™mico",
                    "- Pela orienta√ß√£o durante o desenvolvimento",
                    "",
                    "Aos Colegas de Curso:",
                    "- Pelo feedback e testes durante o desenvolvimento",
                    "- Pelo compartilhamento de conhecimentos",
                    "",
                    "√Ä Comunidade de Desenvolvimento:",
                    "- Pelos recursos e tutoriais dispon√≠veis",
                    "- Pelo c√≥digo aberto que inspirou solu√ß√µes",
                    "",
                    "Aos Jogadores de RPG:",
                    "- Pelas ideias e sugest√µes de gameplay",
                    "- Pelo entusiasmo que motivou o projeto",
                    "",
                    "E a todos que apoiaram este projeto!",
                ]
            },









            #____________________________________________________________________________________
            #(separacao das paginas serias e das memes)
            {
                "title": "Extra Secreto",
                "content": [
                    "O qu√™...? Voc√™ ainda est√° aqui?",
                    "",
                    "Os cr√©ditos j√° acabaram faz tempo!",
                    "N√£o tem mais nada pra ver, juro üòÖ"
                ]
            },
            {
                "title": "Ainda Aqui?",
                "content": [
                    "S√©rio mesmo?",
                    "",
                    "T√° bom ent√£o, aqui vai um coelho fofo:",
                    "(\\_._/) ",
                    "( ‚Ä¢_‚Ä¢ ) ",
                    "/ >‚ù§Ô∏è   ",
                    "",
                    "Pronto, agora pode ir!"
                ]
            },
            {
                "title": "Ok, √öltima P√°gina",
                "content": [
                    "Eu j√° n√£o tenho mais o que colocar aqui...",
                    "",
                    "Talvez uma curiosidade in√∫til:",
                    "Sabia que em D&D um dado d20 tem icosaedro como nome t√©cnico?",
                    "",
                    "Impressionante, n√©? N√£o? üòÖ"
                ]
            },
            {
                "title": "Chega!",
                "content": [
                    "Agora √© s√©rio!",
                    "Se voc√™ ainda est√° rolando, voc√™ oficialmente:",
                    "",
                    "GANHOU +1 de Paci√™ncia",
                    "GANHOU +1 de Carisma",
                    "",
                    "Obrigado de verdade por jogar üíñ"
                ]
            },
            {
                "title": "Fim de Verdade!",
                "content": [
                    "T√°... agora acabou MESMO.",
                    "",
                    "Desliga o jogo e v√° tomar uma √°gua! üíß",
                    "",
                    "At√© a pr√≥xima aventura!",
                    "‚Äì Hannah"
                ]
            }

        ]

    def render(self, stdscr):
        stdscr.clear()
        height, width = stdscr.getmaxyx()
        
        # Atualiza as op√ß√µes de navega√ß√£o baseadas na p√°gina atual
        self.menu_options = self._get_navigation_options()
        
        # Renderiza o t√≠tulo da p√°gina atual
        title = self.pages[self.current_page]["title"]
        ascii_title = pyfiglet.figlet_format(title, font="small", width=width)
        ascii_lines = ascii_title.splitlines()
        
        # Encontra a altura real do t√≠tulo (ignorando linhas vazias)
        title_height = 0
        for i, line in enumerate(ascii_lines):
            if line.strip():
                x = max((width - len(line)) // 2, 0)
                if i < height:
                    try:
                        stdscr.addstr(i, x, line, curses.A_BOLD)
                    except curses.error:
                        pass
                title_height = i + 1
        
        # Renderiza o conte√∫do da p√°gina com suporte a rolagem
        content = self.pages[self.current_page]["content"]
        content_start_y = title_height + 1
        
        # Calcula a rolagem m√°xima para esta p√°gina
        self.calculate_max_scroll(
            content_height=len(content),
            screen_height=height,
            header_lines=title_height + 1,
            footer_lines=2 +1 # Barra de navega√ß√£o
        )
        
        # Renderiza apenas as linhas vis√≠veis
        for i, line in enumerate(content):
            # Pula linhas que est√£o acima da √°rea vis√≠vel devido √† rolagem
            if i < self.scroll_offset:
                continue
                
            y = content_start_y + i - self.scroll_offset
            # Para de renderizar se ultrapassar a √°rea vis√≠vel
            if y >= height - 2:
                break
                
            x = max((width - len(line)) // 2, 0)
            try:
                stdscr.addstr(y, x, line)
            except curses.error:
                # Ignora erros de renderiza√ß√£o fora da tela
                pass
        
        # Renderiza o menu de navega√ß√£o
        nav_y = height - 2
        
        # Indicador de p√°gina e posi√ß√£o de rolagem
        scroll_info = f"P√°gina {self.current_page + 1}/{len(self.pages)}"
        if self.max_scroll > 0:
            scroll_info += f" | Pos: {self.scroll_offset + 1}-{min(len(content), self.scroll_offset + height - title_height - 3)}/{len(content)}"
        stdscr.addstr(nav_y, (width - len(scroll_info)) // 2, scroll_info)
        
        # Op√ß√µes de navega√ß√£o - distribu√≠das horizontalmente
        option_spacing = width // (len(self.menu_options) + 1)
        
        for i, option in enumerate(self.menu_options):
            x = option_spacing * (i + 1) - len(option) // 2
            if i == self.current_selection:
                stdscr.addstr(nav_y, x, option, curses.A_REVERSE)
            else:
                stdscr.addstr(nav_y, x, option)
        
        stdscr.refresh()

    def handle_input(self):
        # Primeiro tenta processar rolagem (herdado do BaseState)
        key = self.stdscr.getch()
        if self.handle_scroll_input(key):
            self.game.needs_render = True
            return
            
        # Depois processa navega√ß√£o entre p√°ginas
        if key in (curses.KEY_LEFT, ord('a')):
            self.current_selection = (self.current_selection - 1) % len(self.menu_options)
            self.game.needs_render = True
            
        elif key in (curses.KEY_RIGHT, ord('d')):
            self.current_selection = (self.current_selection + 1) % len(self.menu_options)
            self.game.needs_render = True
            
        elif key in (curses.KEY_ENTER, 10, 13):
            selected_option = self.menu_options[self.current_selection]
            
            if selected_option == "Pr√≥xima P√°gina":
                self.current_page = min(self.current_page + 1, len(self.pages) - 1)
                self.scroll_offset = 0  # Reseta a rolagem ao mudar de p√°gina
                self.current_selection = 0
                self.game.needs_render = True
                
            elif selected_option == "P√°gina Anterior":
                self.current_page = max(self.current_page - 1, 0)
                self.scroll_offset = 0  # Reseta a rolagem ao mudar de p√°gina
                self.current_selection = 0
                self.game.needs_render = True
                
            elif selected_option == "Voltar ao Menu":
                self.game.pop_state()
                self.game.needs_render = True
            
            elif selected_option == "Ver Equipe com Detalhes":
                self.game.push_state(TeamDetailsState(self.game))

        elif key == 27:  # ESC
            self.game.pop_state()
            self.game.needs_render = True


    def execute_choice(self):
        # N√£o √© usado neste estado, mas precisa estar presente
        pass